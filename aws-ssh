#!/usr/bin/env bash

help() {
  printf "=======================================================================\n"
  printf "\033[0;32mAWS-SSH: Connect to AWS EC2 Instances at Lightning Speed\033[0m \n"
  printf "=======================================================================\n\n"
  printf "Usage: \n"
  printf "\033[0;31mList Instances\033[0m:\t\t\taws-ssh list \033[0;36m<partial-search-term>\033[0m \n"
  printf "\033[0;31mConnect\033[0m:\t\t\taws-ssh connect \033[0;36m<partial-search-term> <username>\033[0m \n"
  printf "\033[0;31mPrivate IP Connect\033[0m:\t\taws-ssh priconn \033[0;36m<partial-search-term> <username>\033[0m \n"
  printf "\033[0;31mPublic  IP Connect\033[0m:\t\taws-ssh pubconn \033[0;36m<partial-search-term> <username>\033[0m \n\n"
  printf "Notes: \n"
  printf "\033[0;36m<partial-search-term>\033[0m matchs \"instance name\" and \"instance id\" \n"
  printf "\033[0;36m<username>\033[0m will be used from \033[0;36m~/.aws-ssh-config\033[0m if not provided \n"
  printf "\033[0;36mBastion Servers\033[0m can be configured in \033[0;36m~/.aws-ssh-config\033[0m \n"
  printf "\033[0;36mPrivate Keys (*.pem)\033[0m can be configured in \033[0;36m~/.aws-ssh-config\033[0m \n"
  printf "\nExample \033[0;36m~/.aws-ssh-config\033[0m:\n\n"
  printf " \`\`\`\n"
  printf " \e[3mPRIVATE_KEY=~/.ssh/somekey.pem\e[0m \n"
  printf " \e[3mBASTION=username@192.168.50.100\e[0m\n"
  printf " \e[3mDEFAULT_USER=ec2-user\e[0m \n\n"
  printf " \`\`\`\n"
}

load-config() {
  [ -f "$HOME/.aws-ssh-config" ] && source "$HOME/.aws-ssh-config"
  [ -f "$HOME/.config/aws-ssh/config" ] && source "$HOME/.config/aws-ssh/config"
  [ -f "$XDG_CONFIG_PATH/.aws-ssh/config" ] && source "$XDG_CONFIG_PATH/.aws-ssh/config"
}

bastion() {
  ([ ! -z $BASTION ] && echo "-J $BASTION") || echo ""
}

private-key-specifier() {
  ([ ! -z $PRIVATE_KEY ] && echo "-i $PRIVATE_KEY") || echo ""
}

default-user() {
  [ -z "$1" ] && echo "$DEFAULT_USER" || echo "$1"
}

aws-instances() {
  AWS_FILTER="*"
  OUTPUT_TYPE="table"
  [ ! -z "$1" ] && AWS_FILTER="*$1*"
  [ ! -z "$2" ] && OUTPUT_TYPE="$2"
  aws ec2 describe-instances\
    --query "Reservations[].Instances[?Tags[?contains(Value, '$1')] || contains(InstanceId, '$1')]|[?length(@) > \`0\`][].{InstanceID:InstanceId,PrivateIP:PrivateIpAddress,PublicIpAddress:PublicIpAddress,Instance:Tags[?Key=='Name']|[0].Value}"\
    --filter "Name=instance-state-name,Values=running"\
    --output "$OUTPUT_TYPE" 
}

aws-private-connect() {
  [ -z "$1" ] && help && return
  CONN_IP_ADDR="$(echo "$(aws-instances $1 json | jq -r '.[] | .[] | "\(.PrivateIP)\t\(.Instance)\t\(.InstanceID)\t\(.PublicIPAddr)"')" | fzf | awk '{print $1}')"
  ssh $(bastion) $(private-key-specifier) "$(default-user $2)@$CONN_IP_ADDR"
}

aws-public-connect() {
  [ -z "$1" ] && help && return
  CONN_IP_ADDR="$(echo "$(aws-instances $1 json | jq -r '.[] | "\(.Instance)\t\(.InstanceID)\t\(.PrivateIP)\t\(.PublicIpAddress)"')" | fzf | awk "{print $4}")"
}

aws-connect(){
  [ -z "$1" ] && help && return
  CONN_IP_ADDR="$(echo "$(aws-instances $1 json | jq -r '.[] | "\(.Instance)\t\(.InstanceID)\t\(.PrivateIP)\t\(.PublicIpAddress)"')" | fzf | awk "{print $( [ -z "$(bastion)" ] && echo '$4' || echo '$3' )}")"
  ssh $(bastion) $(private-key-specifier) "$(default-user $2)@$CONN_IP_ADDR"
}

initialize() {
  load-config
  case "$1" in
    list)
      aws-instances $2
      ;;
    connect)
      aws-connect ${@:2}
      ;;
    priconn)
      aws-private-connect ${@:2}
      ;;
    pubconn)
      aws-public-connect ${@:2}
      ;;
    *)
      help
      ;;
  esac
}

initialize $@
